<!-- kate: tab-width 2; indent-mode xml; -->
<chapter id="microbe">
<title
>&microbe;</title>
<sect1>
	<title
>Inleiding en algemene syntaxis</title>
	<para
><application
>Microbe</application
> compileert programma's geschreven in de speciale taal voor PICs, en is een programma dat bij &ktechlab; hoort. De syntax is ontworpen voor een &flowcode; programma. De syntax voor het opstarten van <command
>microbe</command
> vanaf de commandoregel is: <programlisting
>microbe [options] [input.microbe] [output.asm]</programlisting
> waarbij de opties zijn: </para>
		<itemizedlist>
			<listitem
><para
><function
>--show-source</function
> - Voegt elke regel van de &microbe; broncode als commentaar toe aan de assembly uitvoer voor de assembly instructies zelf in die regel.</para
></listitem>
			<listitem
><para
><function
>--no-optimize</function
> - Voorkomt optimalisatie van de uit de broncode gegenereerde instructies. Optimalisatie is normaal gesproken veilig, en daarom wordt deze optie hoofdzakelijk gebruikt bij debugging.</para
></listitem>
		</itemizedlist>
		
	<para
>Het .microbe invoer-bestand moet de PIC identificeren door de PIC-naam aan het begin van het .microbe bestand te plaatsen; &eg; de naam van een PIC16F84 is "P16F84". <example
><title
>Eenvoudig compleet &microbe; programma</title>
			<programlisting role="correct"
>P16F84

a = 0
repeat
{
        PORTA = a
        a = a + 1
}
until a == 5

end</programlisting>
			</example>
		</para>

	<sect2 id="namingconventions">
		<title
>Naamconventies</title>
		<para
>De volgende regels zijn van toepassing op namen van variabelen en labels: <itemizedlist>
				<listitem
><para
>Ze kunnen alleen alfanumerieke tekens [a..z][A..Z][0..9] bevatten en de underscore "_".</para
></listitem>
				<listitem
><para
>Ze zijn hoofdlettergevoelig.</para
></listitem>
				<listitem
><para
>Ze mogen niet met een cijfer beginnen.</para
></listitem>
				<listitem
><para
>Ze zouden niet mogen beginnen met <quote
>__</quote
> (dubbele underscore), omdat dit gereserveerd wordt voor gebruik door de compiler.</para
></listitem>
			</itemizedlist>
		</para>
	</sect2>

	<sect2 id="bracingconventions">
		<title
>Conventies voor haakjes</title>
		<para
>Accolades, {}, geven de start en het eind van een code block aan. U kunt ze overal voor de start en achter het eind van een code block plaatsen. Voorbeelden van acceptabele code blocks: <programlisting role="correct"
>statement1 {
        enige code
}</programlisting>
		<programlisting role="correct"
>statement2 {
        andere code }</programlisting>
		
		<programlisting role="correct"
>statement3
{
        andere code
}</programlisting>
		
		<programlisting role="correct"
>statement5 {
        codeblok
} statement6</programlisting>
			</para>
		</sect2>
		<sect2 id="commenting">
			<title
>Commentaar</title>
			<para
>Commentaar plaatsten gaat zoals bij C. // maakt van de rest van de regel commentaar. /* en */ geeft een meerregelige commentaar aan. <programlisting role="correct"
>// dit is een commentaar
x = 2 
/* En dit is
meerregelig commentaar */</programlisting>
		</para>
	</sect2>

	<sect2 id="structure">
		<title
>Programma structuur</title>
		<para
>U moet de PIC id aan het begin van het programma toevoegen. Het eind van het hoofdprogramma geeft u aan met <quote
>end</quote
>. Subroutines moet u achter <quote
>end</quote
> plaatsen. </para>
	</sect2>

	<sect2 id="subroutines">
		<title
>Subroutines</title>
		<para
>U kunt van elke plaats in de code een subroutine aanroepen. Syntax: </para>
		<programlisting role="correct"
>sub SubName
{
        // Code...
}</programlisting>
<para
>De subroutine roept u aan met <quote
>call <replaceable
>SubName</replaceable
></quote
>.</para>
	</sect2>
</sect1>

<sect1 id="languagereference">
	<title
>Referentie &microbe; taal</title>
	<sect2 id="if">
		<title
>if</title>
		<para
>Conditionele tweesprong. Syntax: <programlisting role="correct"
>if [expression] then [statement]</programlisting
> of <programlisting role="correct">
if [expression] then
{
        [statement block]
}</programlisting
> Vergelijkbaar met else: <programlisting role="correct"
>else [statement]</programlisting
> of <programlisting role="correct"
>else
{
        [statement block]
}</programlisting>
			</para>
			
			<example
><title
>if</title>
			<programlisting role="correct"
>if porta.0 is high then
{
        delay 200
}
else
{
        delay 300
}</programlisting>
		</example>
	</sect2>
	
	<sect2 id="alias">
		<title
>alias</title>
		<para
>Vervangt een tekenreeks door een ander als alias. Syntax: <programlisting role="correct"
>alias [from] [to]</programlisting>
		</para>
	</sect2>
	
	<sect2 id="repeat">
		<title
>repeat</title>
		<para
>Herhaalt het uitvoeren van het statement block uit totdat de expressie waar is. De controle of de expressie waar is, wordt na het statement block uitgevoerd, daarom zal de statement block altijd tenminste een keer worden uitgevoerd. Syntax: <programlisting role="correct"
>repeat
{
        [statement block]
}
until [expression]</programlisting>
	</para>
</sect2>

<sect2 id="while">
<title
>while</title>
	<para
>Vergelijkbaar met repeat, dit herhaalt het uitvoeren van het statement block uit. Maar de controle of de expressie waar is wordt voor de de uitvoer gedaan, niet daarna. daarom zal als uitkomst van de controle op de expressie negatief is, de statement nooit worden uitgevoerd. Syntax: <programlisting role="correct"
>while [expression]
{
        [statement block]
}</programlisting>
	</para>
</sect2>


<sect2 id="goto">
	<title
>goto</title>
	<para
>Dit zorgt dat het programma verdergaat met de volgende statement na het opgeven label. Goto syntax: <programlisting role="correct"
><function
>goto</function
> [labelname]</programlisting
> Label syntax: <programlisting role="correct"
><function
>labelname:</function
></programlisting
> Het vermijden van het gebruik van goto wordt vaak als goed programmeren gezien. Het gebruik van control statements en subroutines zal resulteren in een beter leesbaar programma. </para>
	
	<example
><title
>goto</title>
	<programlisting role="correct"
>goto MyLabel

...

[MyLabel]:
// Code gaat verder op dit punt</programlisting>
		</example>
	</sect2>
	
	<sect2 id="call">
		<title
>call</title>
		<para
>Roept een subroutine aan. Syntax: <programlisting role="correct"
><function
>call</function
> [SubName]</programlisting
> waarbij <replaceable
>SubName</replaceable
> de naam van de subroutine is die u aanroept. </para>
	</sect2>
	
	<sect2 id="delay">
	<title
>delay</title>
		<para
>Dit veroorzaakt dat het uitvoeren van de code voor de opgeven periode stopt. De interval is in millisecondes. Syntax: <programlisting role="correct"
><function
>delay</function
> [interval]</programlisting>
		
		<note
><para
>Op dit moment, wordt door &microbe; aangenomen dat de PIC werkt met een kloksnelheid van 4MHz - &ie; elke instructie heeft 1 microseconde nodig om verwerkt te worden. Als dat niet het geval is, dan moet u de interval proportioneel aanpassen.</para
></note>
		</para>
	</sect2>
	
	<sect2 id="sevenseg">
		<title
>sevenseg</title>
		<para
>Dit wordt gebruikt voor het definiëren van de pinbezetting van een (common cathode) zeven segment display verbonden met de PIC. Syntax: <programlisting role="correct"
><function
>sevenseg</function
> [name] [a] [b] [c] [d] [e] [f] [g]</programlisting
> waar [a]...[g] de pinnen van de PIC zijn waarmee de respectievelijke segmenten van de zeven segment display zijn verbonden. De pinnen kunnen zowel als PORTX.N of RXN worden geschreven. </para>
		
		<para
>Bij het tonen van een cijfer op de zeven segment, wordt de pin bezetting behandelt als een alleen lezen variabele. <example>
				<title
>Een uitvoer naar een zeven segment definiëren</title>
				<programlisting role="correct"
>sevenseg seg1 RB0 RB1 RB2 RB3 RB4 RB5 RB6
seg1 = x + 2</programlisting>
				</example>
		</para>
	</sect2>
	
	<sect2 id="keypad">
		<title
>toetsenbordje</title>
		<para
>Dit gebruikt u om de pinnen van een PIC te definiëren waaraan een toetsenbordje is verbonden. Syntax: <programlisting role="correct"
><function
>keypad</function
> [name] [rij 1] ... [rij 4] [colum 1] ... [colum n]</programlisting
> waar [rij 1] ... [rij 4] en [colum 1] ... [colum n] de pinnen van de PIC zijn waaraan de respectievelijke rijen en kolommen van het toetsenbordje zijn verbonden (op dit moment kunt u het aantal rijen niet wijzigen). zie <xref linkend="sevenseg"/> (hierboven) voor meer informatie over pin bezetting. </para>
		
		<para
>U moet de kolommen van het toetsenbord met 100k weerstanden omlaag trekken naar aarde. U moet de pinnen van de rijen als uitgang configureren en de pinnen van de kolommen als ingangen. Nadat het toetsenbordje is gedefinieerd, wordt het behandelt als een read only variabel. <example>
				<title
>Een toetsenbord definiëren en uitlezen</title>
					<programlisting role="correct"
>keypad keypad1 RB0 RB1 RB2 RB3 RB4 RB5 RB6
x = keypad1</programlisting>
			</example>
		</para>
			
		<para
>De waarden die u van een toetsenbord inleest zijn standaard: <itemizedlist
> <listitem
><para
>De waarde van het getal als het numerieke toets is (1 tot 3 voor de bovenste rij; hexadecimal A tot D langs de vierde kolom omlaag en verder voor elke extra kolom).</para
></listitem
> <listitem
><para
>253 voor de toets in rij 4, kolom 1.</para
></listitem
> <listitem
><para
>254 voor de toets in rij 4, kolom 3.</para
></listitem
> </itemizedlist
> U kunt deze waarden herdefiniëren door gebruik van het alias commando, waarbij de naam van de toets in rij x, kolom y (rijen en kolommen starten bij 1), is Keypad_x_y. Bijvoorbeeld, om de ster toets op een 4x3 toetsenbord de waarde nul te geven, moet u de volgende alias gebruiken: <example>
				<title
>De toets van een toetsenbord vervangen door een waarde</title>
				<programlisting role="correct"
>alias Keypad_4_1 0</programlisting>
			</example>
		</para>
	</sect2>
</sect1>

<sect1 id="picio">
<title
>PIC I/O</title>
	
	<sect2 id="tristate">
	<title
>Poort richting</title>
		<para
>De poort richting stelt u in door een waarde toe te kennen aan TRIS*, waar * de poortletter is. Als voorbeeld: </para>
		<example
><title
>Poort richtingen instellen</title>
		<programlisting role="correct"
>TRISB = b'01111001'</programlisting>
		</example>
		<para
>Dit hierboven stelt de pinnen RB1, RB2 en RB7 op PORTB in als uitgangen, en de andere pinnen op PORTB als ingangen. In dit voorbeeld is b'01111001' een binaire representatie van het output type. De 1 aan de rechterkant stelt een uitgang op RB0 voor, en de 0 aan de linkerkant stelt een ingang op RB7 voor. </para>
	</sect2>
	
	<sect2 id="ports">
	<title
>Port I/O</title>
		<para
>U kunt een poort behandelen alsof het een variabele is. Bijvoorbeeld: </para>
		
		<example
><title
>Naar een poort schrijven</title>
		<programlisting role="correct"
>x = PORTA</programlisting>
		</example>
		
		<para
>Dit hierboven koppelt de waarde van PORTA aan de variabele x. </para>
	</sect2>
	
	<sect2 id="pins">
	<title
>Pin I/O</title>
		<para
>De pin van een poort kunt u krijgen door het pinnummer vooraf te laten gaan door de naam van de poort; &eg; Pin 2 (startend van Pin 0) van PORTA is bekend als <emphasis
>PORTA.0</emphasis
>. De syntax voor het instellen van de status van een pin is: <programlisting role="correct"
>PORTX.N = <emphasis
>STATE</emphasis
></programlisting
> waar <emphasis
>STATE</emphasis
> kan zijn <emphasis
>hoog</emphasis
> of <emphasis
>laag</emphasis
>. De syntax voor het testen van de status van een pin is: <programlisting role="correct"
><function
>if</function
> PORTX.N is <emphasis
>STATE</emphasis
> <function
>then</function
></programlisting
> Door deze voorbeelden te combineren krijgen we: </para>
		<example
><title
>Testen en instellen van de pin-status</title>
		<programlisting role="correct"
>TRISA = 0
TRISB = 255
<function
>if</function
> PORTA.3 is <function
>high</function
> <function
>then</function>
{
        PORTB.5 = <function
>low</function>
}
<function
>else</function>
{
        PORTB = PORTA + 15
}</programlisting>
		</example>
	</sect2>
</sect1>
	
<sect1 id="variables">
<title
>Variabelen</title>
	<para
>Alle variabelen zijn 8-bit unsigned integers, in de range van 0 tot 255. <application
>&microbe;</application
> ondersteund de standaard bewerkingen met maar een variabele en binaire bewerkingen (werkend met twee variabelen) die door de PIC kunnen worden uitgevoerd. Daarnaast ondersteund &microbe; ook delen en vermenigvuldigen. </para>
	<sect2 id="unary">
	<title
>Bewerkingen met één variabele</title>
		<para>
		<itemizedlist>
		<listitem
><para
><emphasis
>rotateleft x</emphasis
> - Verschuift de bits van variabele X naar links, waarbij de bit die links eraf valt weer rechts wordt toegevoegd.</para
></listitem>
		<listitem
><para
><emphasis
>rotateright x</emphasis
> - Verschuift de bits van variabele X naar rechts, waarbij de bit die rechts eraf valt weer links wordt toegevoegd.</para
></listitem>
		<listitem
><para
><emphasis
>increment x</emphasis
> - Verhoogt de variabele x met 1. Als x de waarde van 255 heeft, dan klapt x om naar 0.</para
></listitem>
		<listitem
><para
><emphasis
>decrement x</emphasis
> - Vermindert de variabele x met 1. Als x de waarde van 0 heeft, dan klapt x om naar 255.</para
></listitem>
		</itemizedlist>
		</para>
	</sect2>
	
	<sect2 id="arithmetic">
	<title
>Rekenen</title>
		<para
>Ondersteunde bewerkingen: <itemizedlist>
		<listitem
><para
><emphasis
>Optellen:</emphasis
> x + y</para
></listitem>
		<listitem
><para
><emphasis
>Aftrekken:</emphasis
> x - y</para
></listitem>
		<listitem
><para
><emphasis
>Vermenivuldigen:</emphasis
> x * y</para
></listitem>
		<listitem
><para
><emphasis
>Delen:</emphasis
> x / y</para
></listitem>
		<listitem
><para
><emphasis
>Binaire XOR:</emphasis
> x XOR y</para
></listitem>
		<listitem
><para
><emphasis
>Binaire AND:</emphasis
> x AND y</para
></listitem>
		<listitem
><para
><emphasis
>Binaire OR:</emphasis
> x OR y</para
></listitem>
		</itemizedlist>
		</para>
	</sect2>
	
	<sect2 id="comparison">
	<title
>Vergelijken</title>
	<para
>Ondersteunde bewerkingen: </para>
	<itemizedlist>
	<listitem
><para
><emphasis
>Is gelijk aan:</emphasis
> x == y</para
></listitem>
	<listitem
><para
><emphasis
>Is niet gelijk aan:</emphasis
> x != y</para
></listitem>
	<listitem
><para
><emphasis
>Is groter dan:</emphasis
> x 
> y</para
></listitem>
	<listitem
><para
><emphasis
>Is kleiner dan:</emphasis
> x &lt; y</para
></listitem>
	<listitem
><para
><emphasis
>Is groter of gelijk aan:</emphasis
> x &gt;= y</para
></listitem>
	<listitem
><para
><emphasis
>Is kleiner of gelijk aan:</emphasis
> x &lt;= y</para
></listitem>
	</itemizedlist>
	
	<para
>Bijvoorbeeld: </para>
	<example
><title
>Vergelijken</title>
	<programlisting role="correct"
><function
>if</function
> PORTA 
>= 5 <function
>then</function>
{
        ...
}</programlisting>
	</example>
	</sect2>
</sect1>

<!--
<sect1 id="interrupts">
<title
>Interrupts</title>
	<para>
	There are several types of events, and some of these take an optional parameter making
	the condition under which the routine is called more specific.
	<itemizedlist>
	<listitem
><para
><emphasis
>change &lt;pin name&gt;</emphasis>
		 - Occurs when the state of the specified pin changes. Pin name is in the usual syntax of PORTX.n, &eg; <programlisting
>interrupt change PORTB.4</programlisting
></para
></listitem>
	<listitem
><para
><emphasis
>timer</emphasis
> - ///TODO</para
></listitem>
	<listitem
><para
><emphasis
>external</emphasis
> - ///TODO</para
></listitem>
	</itemizedlist>
	</para>
</sect1>
-->
</chapter>
